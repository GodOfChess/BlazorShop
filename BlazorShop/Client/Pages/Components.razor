@page "/components"
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@inject IComponentService ComponentService
@inject ILinkService LinkService

@if (_admin)
{
    <div class="row">
        <div class="col">
            <button class="btn btn-primary mb-2" @onclick='(() => NavManager.NavigateTo("/addcomponent"))'>Add Component</button>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="thead-light text-center">
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Maker</th>
                    <th>ItemPrice</th>
                    <th>Amount</th>
                    <th>TotalPrice</th>
                    <th></th>
                </tr>
            </thead>
            <tbody class="text-center">
                <GenericList ListOfItems="ComponentService.Components">
                    <ItemTemplate Context="component">
                        <tr>
                            <td>@component.Id</td>
                            <td>@component.Name</td>
                            <td>@component.Maker</td>
                            <td>@component.ItemPrice</td>
                            <td>
                                @links.Count(item => item.ComponentName == component.Name)
                            </td>
                            <td>@(links.Count(item => item.ComponentName == component.Name) * int.Parse(component.ItemPrice))</td>
                            <td><button class="btn btn-danger btn-sm" @onclick="() => Delete(component.Id)">Delete</button></td>
                        </tr>
                    </ItemTemplate>
                </GenericList>
            </tbody>
        </table>
    </div>

    <h5>Maker Information</h5>
    <select class="btn btn-toolbar border dropdown-toggle text-left mt-2" @onchange="ChangeMaker">
        <option selected value="">Choose maker</option>
        @foreach (var item in ComponentService.Components)
        {
            <option value="@item.Maker">@item.Maker</option>
        }
    </select>
    <div class="table-responsive mt-2">
        <table class="table table-striped table-bordered">
            <thead class="thead-light text-center">
                <tr>
                    <th>Maker</th>
                    <th>Component</th>
                    <th>ItemPrice</th>
                    <th>Amount</th>
                    <th>TotalPrice</th>
                </tr>
            </thead>
            <tbody class="text-center">
                <GenericList ListOfItems="ComponentService.Components">
                    <ItemTemplate Context="component">
                        @if (component.Maker == maker)
                        {
                            <tr>
                                <td>@component.Maker</td>
                                <td>@component.Name</td>
                                <td>@component.ItemPrice</td>
                                <td>
                                    @links.Count(item => item.ComponentName == component.Name)
                                </td>
                                <td>@(links.Count(item => item.ComponentName == component.Name) * int.Parse(component.ItemPrice))</td>
                            </tr>
                        }
                    </ItemTemplate>
                </GenericList>
            </tbody>
        </table>
    </div>
    <div class="row">
        <div class="col">
            <p class="text-success font-weight-bolder">Final price: @sum &#8381;</p>
        </div>
    </div>
}
else
{
    <h3>You have not access to this url</h3>
}

@code {
    private bool _admin;
    private int sum;
    private List<Link> links = new List<Link>();
    private string maker;

    protected override async Task OnInitializedAsync()
    {
        _admin = await LocalStorage.GetItemAsync<bool>("admin");
        await ComponentService.LoadComponents();
        links = await LinkService.LoadLinks();
    }

    private async Task Delete(int id)
    {
        await ComponentService.DeleteComponent(id);
        await ComponentService.LoadComponents();
    }

    private void ChangeMaker(ChangeEventArgs currentItem)
    {
        maker = currentItem.Value.ToString();
        sum = 0;
        CheckSum();
    }

    private void CheckSum()
    {
        foreach (var component in ComponentService.Components)
        {
            sum += links.Count(item => item.ComponentName == component.Name && component.Maker == maker) * int.Parse(component.ItemPrice);
        }
    }
}

